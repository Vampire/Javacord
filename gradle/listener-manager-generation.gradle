import com.github.javaparser.JavaParser
import com.github.javaparser.ParserConfiguration.LanguageLevel
import com.github.javaparser.ast.CompilationUnit
import com.github.javaparser.ast.Modifier
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration
import com.github.javaparser.printer.PrettyPrinter
import com.github.javaparser.printer.PrettyPrinterConfiguration
import com.github.javaparser.symbolsolver.JavaSymbolSolver
import com.github.javaparser.symbolsolver.model.resolution.TypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.CombinedTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.JavaParserTypeSolver
import com.github.javaparser.symbolsolver.resolution.typesolvers.ReflectionTypeSolver

import javax.annotation.Generated

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.javaparser:javaparser-symbol-solver-core:3.6.8'
        classpath 'javax.annotation:javax.annotation-api:1.3.2'
    }
}

def javacordApi = project(':javacord-api')

task generateListenerManagers {
    ext.apiOutputDirectory = "$javacordApi.buildDir/generated/listener-manager-interfaces"

    inputs.files javacordApi.sourceSets.main.allJava withPropertyName 'apiJavaFiles'
    outputs.dir apiOutputDirectory withPropertyName 'apiOutputDirectory'

    doLast {
        delete apiOutputDirectory

        def typeSolver = new CombinedTypeSolver(javacordApi.sourceSets.main.allJava.srcDirs
                .findAll { it.directory }
                .collect { new JavaParserTypeSolver(it) }
                as TypeSolver[])
        typeSolver.add new ReflectionTypeSolver()
        def staticJavaparserConfiguration = JavaParser.staticConfiguration
        staticJavaparserConfiguration.symbolResolver = new JavaSymbolSolver(typeSolver)
        staticJavaparserConfiguration.languageLevel = LanguageLevel.JAVA_9

        // collect the attachable listener interfaces
        def attachableInterfacesMap = javacordApi.sourceSets.main.allJava.matching {
            include 'org/javacord/api/listener/**/*AttachableListener.java'
            exclude 'org/javacord/api/listener/**/ObjectAttachableListener.java'
        }.collectMany {
            JavaParser.parse(it).findAll(ClassOrInterfaceDeclaration)*.resolve()
        }.collectEntries {
            [it, []]
        }

        // determine which attachable interfaces have subtypes as they need special treatment
        def attachableInterfacesWhichHaveSubtypes = attachableInterfacesMap.keySet()
                .findAll { attachableInterface ->
            attachableInterfacesMap.keySet().any {
                it.allInterfacesExtended.typeDeclaration.contains attachableInterface
            }
        }
        def attachableInterfacesWithDirectSubtypes = attachableInterfacesMap.keySet()
                .collectEntries { attachableInterface ->
            [attachableInterface, attachableInterfacesMap.keySet().findAll {
                it.interfacesExtended.typeDeclaration.contains attachableInterface
            }]
        }

        // determine which listeners extend which attachable listener directly
        javacordApi.sourceSets.main.allJava.matching {
            include 'org/javacord/api/listener/**/*Listener.java'
            exclude 'org/javacord/api/listener/**/*AttachableListener.java'
        }.collectMany {
            JavaParser.parse(it).findAll(ClassOrInterfaceDeclaration)*.resolve()
        }.each { listener ->
            def extendedInterfaces = listener.interfacesExtended.typeDeclaration
            attachableInterfacesMap.each {
                if (extendedInterfaces.contains(it.key)) { it.value << listener }
            }
        }

        def listenerManagerName =
                typeSolver.solveType('org.javacord.api.util.event.ListenerManager').qualifiedName
        def objectAttachableListener =
                typeSolver.solveType('org.javacord.api.listener.ObjectAttachableListener')
        def globallyAttachableListener =
                typeSolver.solveType('org.javacord.api.listener.GloballyAttachableListener')
        def messageAttachableListener =
                typeSolver.solveType('org.javacord.api.listener.message.MessageAttachableListener')

        // generate attachable listener manager interfaces
        attachableInterfacesMap.each { attachableInterface, listeners ->
            def attachableListenerManagerFile = new CompilationUnit(attachableInterface.packageName)
                    .setStorage(file("$apiOutputDirectory/" +
                            "${attachableInterface.packageName.replace '.', '/'}/" +
                            "${attachableInterface.name}Manager.java").toPath())
                    .addImport(Collection)
                    .addImport(List)
                    .addImport(Map)
                    .addImport(listenerManagerName)
            def attachableListenerManagerInterface = attachableListenerManagerFile
                    .addInterface("${attachableInterface.name}Manager")
                    .addSingleMemberAnnotation(Generated, '"listener-manager-generation.gradle"')
                    .setJavadocComment(
                            "This class can be used to add and retrieve {@link ${attachableInterface.name}}s.")

            def uncachedMessageAttachableListenerManagerFile
            def uncachedMessageAttachableListenerManagerInterface
            if (attachableInterface.equals(messageAttachableListener)) {
                uncachedMessageAttachableListenerManagerFile = new CompilationUnit(attachableInterface.packageName)
                        .setStorage(file("$apiOutputDirectory/" +
                                "${attachableInterface.packageName.replace '.', '/'}/" +
                                'UncachedMessageAttachableListenerManager.java').toPath())
                        .addImport(Collection)
                        .addImport(List)
                        .addImport(Map)
                        .addImport(listenerManagerName)

                uncachedMessageAttachableListenerManagerInterface = uncachedMessageAttachableListenerManagerFile
                        .addInterface('UncachedMessageAttachableListenerManager')
                        .addSingleMemberAnnotation(Generated, '"listener-manager-generation.gradle"')
                        .setJavadocComment('This class can be used to add and retrieve ' +
                                '{@link MessageAttachableListener}s for potentially uncached messages.')
            }

            listeners.each {
                addConcreteListenerMethods typeSolver, attachableInterface, it, attachableListenerManagerFile,
                        attachableListenerManagerInterface, uncachedMessageAttachableListenerManagerFile,
                        uncachedMessageAttachableListenerManagerInterface
            }

            if (attachableInterface.equals(globallyAttachableListener)) {
                addGenericGloballyAttachableListenerMethods(attachableListenerManagerInterface)
            } else {
                if (uncachedMessageAttachableListenerManagerInterface) {
                    uncachedMessageAttachableListenerManagerFile.addImport objectAttachableListener.qualifiedName
                }
                attachableListenerManagerFile.addImport objectAttachableListener.qualifiedName
                attachableInterfacesWithDirectSubtypes[attachableInterface].each {
                    if (it.packageName != attachableInterface.packageName) {
                        attachableListenerManagerFile.addImport "${it.qualifiedName}Manager"
                    }
                    attachableListenerManagerInterface.addExtendedType "${it.name}Manager"
                }
                def listenerManagerTypeParameter =
                        attachableInterfacesWhichHaveSubtypes.contains(attachableInterface) ?
                                "? extends $attachableInterface.name" : 'T'
                addGenericObjectAttachableListenerMethods typeSolver, attachableInterface,
                        attachableListenerManagerFile, attachableListenerManagerInterface,
                        listenerManagerTypeParameter, uncachedMessageAttachableListenerManagerFile,
                        uncachedMessageAttachableListenerManagerInterface
            }

            [
                    attachableListenerManagerFile,
                    uncachedMessageAttachableListenerManagerFile
            ].findAll().storage*.ifPresent {
                it.save {
                    new PrettyPrinter(new PrettyPrinterConfiguration()
                            .setOrderImports(true)
                            .setEndOfLineCharacter('\n')
                            .setColumnAlignParameters(true)
                            .setColumnAlignFirstMethodChain(true)
                    ).print it
                }
            }
        }
    }
}
rootProject.generate.dependsOn generateListenerManagers

javacordApi.with {
    sourceSets {
        main {
            java {
                srcDir generateListenerManagers.apiOutputDirectory
            }
        }
    }
    compileJava.dependsOn generateListenerManagers

    apply plugin: 'idea'
    idea {
        module {
            generatedSourceDirs << file(generateListenerManagers.apiOutputDirectory)
        }
    }
    // we only want to set the generated flag, not the tasks
    configure([tasks.idea, ideaModule]) {
        enabled false
        tasks.remove it
    }
}

def addConcreteListenerMethods(typeSolver, attachableInterface, listener,
                               attachableListenerManagerFile, attachableListenerManagerInterface,
                               uncachedMessageAttachableListenerManagerFile,
                               uncachedMessageAttachableListenerManagerInterface) {
    def specialMessageAttachable = uncachedMessageAttachableListenerManagerInterface &&
            !listener.name.startsWith('CachedMessage')

    if (listener.packageName != attachableInterface.packageName) {
        attachableListenerManagerFile.addImport listener.qualifiedName
        if (specialMessageAttachable) {
            uncachedMessageAttachableListenerManagerFile.addImport listener.qualifiedName
        }
    }

    if (specialMessageAttachable) {
        addMessageSpecificConcreteListenerMethods typeSolver, attachableInterface, listener,
                attachableListenerManagerFile, attachableListenerManagerInterface

        uncachedMessageAttachableListenerManagerInterface
                .addMethod("add$listener.name")
                .setJavadocComment("""
                    Adds a {@link $listener.name}.

                    @param listener The listener to add.
                    @param messageId The id of the message which should be listened to.
                    @return The manager of the listener.
                """.stripIndent())
                .setType("ListenerManager<$listener.name>")
                .addParameter(long, 'messageId')
                .addParameter(listener.name, 'listener')
                .removeBody()
    }

    attachableListenerManagerInterface
            .addMethod("add$listener.name")
            .setJavadocComment("""
                Adds a {@link $listener.name}.

                @param listener The listener to add.
                @return The manager of the listener.
            """.stripIndent())
            .setType("ListenerManager<$listener.name>")
            .addParameter(listener.name, 'listener')
            .removeBody()

    if (specialMessageAttachable) {
        [long, String].each { messageIdType ->
            uncachedMessageAttachableListenerManagerInterface
                    .addMethod("get${listener.name}s")
                    .setJavadocComment("""
                        Gets a list with all registered {@link $listener.name}s.

                        @param messageId The id of the message.
                        @return A list with all registered {@code $listener.name}s.
                    """.stripIndent())
                    .setType("List<$listener.name>")
                    .addParameter(messageIdType, 'messageId')
                    .removeBody()
        }
    }

    attachableListenerManagerInterface
            .addMethod("get${listener.name}s")
            .setJavadocComment("""
                Gets a list with all registered {@link $listener.name}s.

                @return A list with all registered {@code $listener.name}s.
            """.stripIndent())
            .setType("List<$listener.name>")
            .removeBody()
}

def addMessageSpecificConcreteListenerMethods(
        typeSolver, attachableInterface, listener, attachableListenerManagerFile, attachableListenerManagerInterface) {
    def discordApi = typeSolver.solveType('org.javacord.api.DiscordApi')
    if (discordApi.packageName != attachableInterface.packageName) {
        attachableListenerManagerFile.addImport discordApi.qualifiedName
    }

    def message = typeSolver.solveType('org.javacord.api.entity.message.Message')
    if (message.packageName != attachableInterface.packageName) {
        attachableListenerManagerFile.addImport message.qualifiedName
    }

    attachableListenerManagerInterface
            .addMethod("add$listener.name", Modifier.STATIC)
            .setJavadocComment("""
                Adds a {@link $listener.name}.

                @param api The discord api instance.
                @param messageId The id of the message which should be listened to.
                @param listener The listener to add.
                @return The manager of the listener.
            """.stripIndent())
            .setType("ListenerManager<$listener.name>")
            .addParameter('DiscordApi', 'api')
            .addParameter(long, 'messageId')
            .addParameter(listener.name, 'listener')
            .createBody()
            .addStatement("return api.getUncachedMessageUtil().add$listener.name(messageId, listener);")

    [long, String].each { messageIdType ->
        attachableListenerManagerInterface
                .addMethod("get${listener.name}s", Modifier.STATIC)
                .setJavadocComment("""
                    Gets a list with all registered {@link $listener.name}s of a specific message.

                    @param api The discord api instance.
                    @param messageId The id of the message.
                    @return A list with all registered {@code $listener.name}s.
                """.stripIndent())
                .setType("List<$listener.name>")
                .addParameter('DiscordApi', 'api')
                .addParameter(messageIdType, 'messageId')
                .createBody()
                .addStatement("return api.getUncachedMessageUtil().get${listener.name}s(messageId);")
    }
}

def addGenericGloballyAttachableListenerMethods(attachableListenerManagerInterface) {
    attachableListenerManagerInterface
            .addMethod('addListener')
            .setJavadocComment('''
                Adds a {@link GloballyAttachableListener}.
                Adding a listener multiple times will only add it once
                and return the same listener manager on each invocation.
                The order of invocation is according to first addition.

                @param listenerClass The listener class.
                @param listener The listener to add.
                @param <T> The type of the listener.
                @return The manager for the added listener.
            '''.stripIndent())
            .addTypeParameter('T extends GloballyAttachableListener')
            .setType('ListenerManager<T>')
            .addParameter('Class<T>', 'listenerClass')
            .addParameter('T', 'listener')
            .removeBody()

    attachableListenerManagerInterface
            .addMethod('addListener')
            .setJavadocComment('''
                Adds a listener that implements one or more {@link GloballyAttachableListener}s.
                Adding a listener multiple times will only add it once
                and return the same listener managers on each invocation.
                The order of invocation is according to first addition.

                @param listener The listener to add.
                @return The managers for the added listener.
            '''.stripIndent())
            .setType('Collection<ListenerManager<? extends GloballyAttachableListener>>')
            .addParameter('GloballyAttachableListener', 'listener')
            .removeBody()

    attachableListenerManagerInterface
            .addMethod('removeListener')
            .setJavadocComment('''
                Removes a listener that implements one or more {@link GloballyAttachableListener}s.

                @param listener The listener to remove.
            '''.stripIndent())
            .addParameter('GloballyAttachableListener', 'listener')
            .removeBody()

    attachableListenerManagerInterface
            .addMethod('removeListener')
            .setJavadocComment('''
                Removes a {@link GloballyAttachableListener}.

                @param listenerClass The listener class.
                @param listener The listener to remove.
                @param <T> The type of the listener.
            '''.stripIndent())
            .addTypeParameter('T extends GloballyAttachableListener')
            .addParameter('Class<T>', 'listenerClass')
            .addParameter('T', 'listener')
            .removeBody()

    attachableListenerManagerInterface
            .addMethod('getListeners')
            .setJavadocComment('''
                Gets a map with all registered listeners that implement one or more
                {@link GloballyAttachableListener}s and their assigned listener classes they listen to.

                @param <T> The type of the listeners.
                @return A map with all registered listeners that implement one or more
                        {@code GloballyAttachableListener}s and their assigned listener
                        classes they listen to.
            '''.stripIndent())
            .addTypeParameter('T extends GloballyAttachableListener')
            .setType('Map<T, List<Class<T>>>')
            .removeBody()
}

def addGenericObjectAttachableListenerMethods(typeSolver, attachableInterface, attachableListenerManagerFile,
                                              attachableListenerManagerInterface, listenerManagerTypeParameter,
                                              uncachedMessageAttachableListenerManagerFile,
                                              uncachedMessageAttachableListenerManagerInterface) {
    if (uncachedMessageAttachableListenerManagerInterface) {
        addMessageSpecificGenericObjectAttachableListenerMethods typeSolver, attachableInterface,
                attachableListenerManagerFile, attachableListenerManagerInterface, listenerManagerTypeParameter

        [long, String].each { messageIdType ->
            uncachedMessageAttachableListenerManagerInterface
                    .addMethod('addMessageAttachableListener')
                    .setJavadocComment('''
                        Adds a listener that implements one or more {@link MessageAttachableListener}s
                        to the message with the given id.
                        Adding a listener multiple times will only add it once
                        and return the same listener managers on each invocation.
                        The order of invocation is according to first addition.

                        @param messageId The id of the message which should be listened to.
                        @param listener The listener to add.
                        @param <T> The type of the listener.
                        @return The managers for the added listener.
                    '''.stripIndent())
                    .addTypeParameter('T extends MessageAttachableListener & ObjectAttachableListener')
                    .setType('Collection<ListenerManager<T>>')
                    .addParameter(messageIdType, 'messageId')
                    .addParameter('T', 'listener')
                    .removeBody()
        }
    }

    attachableListenerManagerInterface
            .addMethod("add$attachableInterface.name")
            .setJavadocComment("""
                Adds a listener that implements one or more {@link $attachableInterface.name}s.
                Adding a listener multiple times will only add it once
                and return the same listener managers on each invocation.
                The order of invocation is according to first addition.

                @param listener The listener to add.
                @param <T> The type of the listener.
                @return The managers for the added listener.
            """.stripIndent())
            .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
            .setType("Collection<ListenerManager<$listenerManagerTypeParameter>>")
            .addParameter('T', 'listener')
            .removeBody()

    if (uncachedMessageAttachableListenerManagerInterface) {
        [long, String].each { messageIdType ->
            uncachedMessageAttachableListenerManagerInterface
                    .addMethod('removeMessageAttachableListener')
                    .setJavadocComment('''
                        Removes a listener that implements one or more {@link MessageAttachableListener}s
                        from the message with the given id.

                        @param messageId The id of the message.
                        @param listener The listener to remove.
                        @param <T> The type of the listener.
                    '''.stripIndent())
                    .addTypeParameter('T extends MessageAttachableListener & ObjectAttachableListener')
                    .addParameter(messageIdType, 'messageId')
                    .addParameter('T', 'listener')
                    .removeBody()
        }
    }

    attachableListenerManagerInterface
            .addMethod("remove$attachableInterface.name")
            .setJavadocComment("""
                Removes a listener that implements one or more {@link $attachableInterface.name}s.

                @param listener The listener to remove.
                @param <T> The type of the listener.
            """.stripIndent())
            .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
            .addParameter('T', 'listener')
            .removeBody()

    if (uncachedMessageAttachableListenerManagerInterface) {
        [long, String].each { messageIdType ->
            uncachedMessageAttachableListenerManagerInterface
                    .addMethod('getMessageAttachableListeners')
                    .setJavadocComment('''
                        Gets a map with all registered listeners that implement one or more
                        {@link MessageAttachableListener}s and their assigned listener classes they listen to.

                        @param messageId The id of the message.
                        @param <T> The type of the listener.
                        @return A map with all registered listeners that implement one or more
                                {@code MessageAttachableListener}s and their assigned listener
                                classes they listen to.
                    '''.stripIndent())
                    .addTypeParameter('T extends MessageAttachableListener & ObjectAttachableListener')
                    .setType('Map<T, List<Class<T>>>')
                    .addParameter(messageIdType, 'messageId')
                    .removeBody()
        }
    }

    attachableListenerManagerInterface
            .addMethod("get${attachableInterface.name}s")
            .setJavadocComment("""
                Gets a map with all registered listeners that implement one or more {@link $attachableInterface.name}s
                and their assigned listener classes they listen to.

                @param <T> The type of the listeners.
                @return A map with all registered listeners that implement one or more
                        {@code $attachableInterface.name}s and their assigned listener
                        classes they listen to.
            """.stripIndent())
            .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
            .setType('Map<T, List<Class<T>>>')
            .removeBody()

    if (uncachedMessageAttachableListenerManagerInterface) {
        [long, String].each { messageIdType ->
            uncachedMessageAttachableListenerManagerInterface
                    .addMethod('removeListener')
                    .setJavadocComment('''
                        Removes a listener from this entity.

                        @param messageId The id of the message.
                        @param listenerClass The listener class.
                        @param listener The listener to remove.
                        @param <T> The type of the listener.
                    '''.stripIndent())
                    .addTypeParameter('T extends MessageAttachableListener & ObjectAttachableListener')
                    .addParameter(messageIdType, 'messageId')
                    .addParameter('Class<T>', 'listenerClass')
                    .addParameter('T', 'listener')
                    .removeBody()
        }
    }

    attachableListenerManagerInterface
            .addMethod('removeListener')
            .setJavadocComment("""
                Removes a listener from this entity.

                @param listenerClass The listener class.
                @param listener The listener to remove.
                @param <T> The type of the listener.
            """.stripIndent())
            .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
            .addParameter('Class<T>', 'listenerClass')
            .addParameter('T', 'listener')
            .removeBody()
}

def addMessageSpecificGenericObjectAttachableListenerMethods(typeSolver, attachableInterface,
                                                             attachableListenerManagerFile,
                                                             attachableListenerManagerInterface,
                                                             listenerManagerTypeParameter) {
    def discordApi = typeSolver.solveType('org.javacord.api.DiscordApi')
    if (discordApi.packageName != attachableInterface.packageName) {
        attachableListenerManagerFile.addImport discordApi.qualifiedName
    }

    def message = typeSolver.solveType('org.javacord.api.entity.message.Message')
    if (message.packageName != attachableInterface.packageName) {
        attachableListenerManagerFile.addImport message.qualifiedName
    }

    [long, String].each { messageIdType ->
        attachableListenerManagerInterface
                .addMethod('addMessageAttachableListener', Modifier.STATIC)
                .setJavadocComment('''
                    Adds a listener that implements one or more {@link MessageAttachableListener}s to the message with
                    the given id.
                    Adding a listener multiple times will only add it once
                    and return the same listener managers on each invocation.
                    The order of invocation is according to first addition.

                    @param api The discord api instance.
                    @param messageId The id of the message which should be listened to.
                    @param listener The listener to add.
                    @param <T> The type of the listener.
                    @return The managers for the added listener.
                '''.stripIndent())
                .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
                .setType("Collection<ListenerManager<$listenerManagerTypeParameter>>")
                .addParameter('DiscordApi', 'api')
                .addParameter(messageIdType, 'messageId')
                .addParameter('T', 'listener')
                .createBody()
                .addStatement('return api.getUncachedMessageUtil().addMessageAttachableListener(messageId, listener);')
    }

    [long, String].each { messageIdType ->
        attachableListenerManagerInterface
                .addMethod('removeMessageAttachableListener', Modifier.STATIC)
                .setJavadocComment('''
                    Removes a listener that implements one or more {@link MessageAttachableListener}s from the message
                    with the given id.

                    @param api The discord api instance.
                    @param messageId The id of the message.
                    @param listener The listener to remove.
                    @param <T> The type of the listener.
                '''.stripIndent())
                .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
                .addParameter('DiscordApi', 'api')
                .addParameter(messageIdType, 'messageId')
                .addParameter('T', 'listener')
                .createBody()
                .addStatement('api.getUncachedMessageUtil().removeMessageAttachableListener(messageId, listener);')
    }

    [long, String].each { messageIdType ->
        attachableListenerManagerInterface
                .addMethod('getMessageAttachableListeners', Modifier.STATIC)
                .setJavadocComment('''
                    Gets a map with all registered listeners that implement one or more
                    {@link MessageAttachableListener}s and their assigned listener classes they listen to for the
                    message with the given id.

                    @param api The discord api instance.
                    @param messageId The id of the message.
                    @param <T> The type of the listeners.
                    @return A map with all registered listeners that implement one or more
                            {@code MessageAttachableListener}s and their assigned listener
                            classes they listen to.
                '''.stripIndent())
                .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
                .setType('Map<T, List<Class<T>>>')
                .addParameter('DiscordApi', 'api')
                .addParameter(messageIdType, 'messageId')
                .createBody()
                .addStatement('return api.getUncachedMessageUtil().getMessageAttachableListeners(messageId);')
    }

    [long, String].each { messageIdType ->
        attachableListenerManagerInterface
                .addMethod('removeListener', Modifier.STATIC)
                .setJavadocComment('''
                    Removes a {@link MessageAttachableListener} from the message with the given id.

                    @param api The discord api instance.
                    @param messageId The id of the message.
                    @param listenerClass The listener class.
                    @param listener The listener to remove.
                    @param <T> The type of the listener.
                '''.stripIndent())
                .addTypeParameter("T extends $attachableInterface.name & ObjectAttachableListener")
                .addParameter('DiscordApi', 'api')
                .addParameter(messageIdType, 'messageId')
                .addParameter('Class<T>', 'listenerClass')
                .addParameter('T', 'listener')
                .createBody()
                .addStatement('api.getUncachedMessageUtil().removeListener(messageId, listenerClass, listener);')
    }
}
