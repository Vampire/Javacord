import io.codearte.gradle.nexus.BaseStagingTask
import io.codearte.gradle.nexus.NexusStagingPlugin
import org.ajoberstar.grgit.Grgit
import org.kohsuke.github.GitHub
import wooga.gradle.github.publish.GithubPublishPlugin
import wooga.gradle.github.publish.tasks.GithubPublish

import javax.naming.ConfigurationException

import static java.text.MessageFormat.format
import static net.researchgate.release.ReleasePlugin.RELEASE_GROUP

buildscript {
    repositories {
        gradlePluginPortal()
    }
    dependencies {
        classpath 'io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.11.0'
        classpath 'gradle.plugin.net.wooga.gradle:atlas-github:1.0.1'
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'org.ajoberstar:grgit:2.3.0'
        classpath 'org.kohsuke:github-api:1.93'
    }
}

ext {
    it.'signing.secretKeyRingFile' = project.findProperty('javacord.signing.secretKeyRingFile') ?:
            project.findProperty('signing.secretKeyRingFile')
    it.'signing.password' = project.findProperty('javacord.signing.password') ?:
            project.findProperty('signing.password')
    it.'signing.keyId' = project.findProperty('javacord.signing.keyId') ?:
            project.findProperty('signing.keyId')
    sonatypeUsername = project.findProperty('javacord.sonatype.username') ?:
            project.findProperty('sonatype.username')
    sonatypePassword = project.findProperty('javacord.sonatype.password') ?:
            project.findProperty('sonatype.password')
    sonatypeStagingProfileId = project.findProperty('javacord.sonatype.stagingProfileId') ?:
            project.findProperty('sonatype.stagingProfileId')
    it.'github.token' = project.findProperty('javacord.github.token') ?:
            project.findProperty('github.token')
}

allprojects {
    apply plugin: 'maven-publish'

    publishing {
        repositories {
            maven {
                name 'sonatype'
                if (releaseVersion) {
                    url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                } else {
                    url 'https://oss.sonatype.org/content/repositories/snapshots/'
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    tasks.withType(PublishToMavenRepository) {
        doFirst {
            if (!sonatypeUsername) {
                throw new ConfigurationException(
                        'Please set the Sonatype username with project property "sonatype.username" ' +
                                'or "javacord.sonatype.username". If both are set, the latter will be effective.')
            }
            if (!sonatypePassword) {
                throw new ConfigurationException(
                        'Please set the Sonatype password with project property "sonatype.password" ' +
                                'or "javacord.sonatype.password". If both are set, the latter will be effective.')
            }
        }
    }
}

subprojects {
    publishing {
        publications {
            javacord(MavenPublication) {
                from components.java
                artifact javadocJar
                artifact sourcesJar
            }
        }
    }
}

publishing {
    publications {
        javacord(MavenPublication) {
            // add the dependencies to the POM
            from components.java
            // but do not try to publish the JAR
            artifacts.removeAll { !it.classifier && (it.extension == 'jar') }
        }
    }
}

apply from: 'gradle/pom.gradle'

allprojects {
    apply plugin: 'signing'

    signing {
        required {
            // signing is required if this is a release version and the artifacts are to be published
            releaseVersion && tasks.withType(PublishToMavenRepository).find {
                gradle.taskGraph.hasTask it
            }
        }
        sign publishing.publications
    }
}

apply plugin: NexusStagingPlugin
// remove superfluous tasks from NexusStagingPlugin
tasks.removeAll([promoteRepository, closeAndPromoteRepository, getStagingProfile])

nexusStaging {
    stagingProfileId sonatypeStagingProfileId
    username sonatypeUsername
    password sonatypePassword
}

// make sure the staging tasks are run after any publishing tasks if both are to be run
tasks.withType(BaseStagingTask) {
    mustRunAfter allprojects.tasks*.withType(PublishToMavenRepository)

    doFirst {
        if (!sonatypeStagingProfileId) {
            throw new ConfigurationException(
                    'Please set the Sonatype staging profile id with project property "sonatype.stagingProfileId" ' +
                            'or "javacord.sonatype.stagingProfileId". If both are set, the latter will be effective.')
        }
        if (!sonatypeUsername) {
            throw new ConfigurationException(
                    'Please set the Sonatype username with project property "sonatype.username" ' +
                            'or "javacord.sonatype.username". If both are set, the latter will be effective.')
        }
        if (!sonatypePassword) {
            throw new ConfigurationException(
                    'Please set the Sonatype password with project property "sonatype.password" ' +
                            'or "javacord.sonatype.password". If both are set, the latter will be effective.')
        }
    }
}

apply plugin: 'net.researchgate.release'

task buildAll(dependsOn: allprojects.tasks.build)

release {
    tagTemplate = 'v$version'
    buildTasks = ['buildAll']
    git {
        requireBranch = 'development'
        //signTag = true
    }
}

task checkMergeNeeded() {
    group RELEASE_GROUP
    description 'Checks to see if there are any unmerged commits on branch "master".'
    doLast {
        def grgit = Grgit.open(dir: "$rootDir/.git")
        try {
            grgit.fetch remote: 'origin'
            def unmergedCommits = grgit.log(includes: ['origin/master'], excludes: ['HEAD']).size()
            if (unmergedCommits) {
                throw new IllegalStateException(format('There {0,choice,' +
                        '1#is one unmerged commit|' +
                        '1<are {0,number,integer} unmerged commits} on "master".',
                        unmergedCommits))
            }
        } finally {
            grgit?.close()
        }
    }
}
beforeReleaseBuild.dependsOn checkMergeNeeded

//afterReleaseBuild.dependsOn allprojects.tasks*.withType(PublishToMavenRepository), closeRepository

apply plugin: GithubPublishPlugin

def githubRepositoryName
def gitDir = file("$rootDir/.git")
if (gitDir.directory) {
    def grgit
    try {
        grgit = Grgit.open(dir: "$rootDir/.git")
        def originUrl = grgit.remote.list().find { it.name == 'origin' }.url
        def origintUrlMatcher = originUrl =~ /git@github\.com:(.*?)\.git/
        githubRepositoryName = origintUrlMatcher[0][1]
    } catch (Exception ignored) {
    } finally {
        grgit?.close()
    }
}
githubRepositoryName = githubRepositoryName ?: 'Javacord/Javacord'

def tagNameSupplier = { rootProject.plugins.findPlugin('net.researchgate.release').tagName() }
githubPublish {
    enabled releaseVersion
    repositoryName githubRepositoryName
    tagName tagNameSupplier
    releaseName tagNameSupplier
    body rootProject.file('.github/release_body_template.md').text
    draft true
    from allprojects.configurations.archives.artifacts.files
}

afterReleaseBuild.dependsOn tasks.withType(GithubPublish)

preTagCommit.dependsOn updateReadme

task createPullRequestForReleaseTag() {
    group RELEASE_GROUP
    description 'Creates a PR from the release tag to the branch "master".'
    doLast {
        GitHub.connect()
                .getRepository(githubRepositoryName)
                .createPullRequest('title', tagNameSupplier.call(), 'master', null)
    }
}

createReleaseTag.finalizedBy createPullRequestForReleaseTag
createPullRequestForReleaseTag.mustRunAfter commitNewVersion
